--- source_code/swap-contracts/components/v3-core/contracts/ButterPoolDeployer.sol	2023-12-04 18:14:31
+++ target_code/v3-core/contracts/UniswapV3PoolDeployer.sol	2023-12-04 18:14:32
@@ -1,11 +1,11 @@
 // SPDX-License-Identifier: BUSL-1.1
 pragma solidity =0.7.6;
 
-import './interfaces/IButterPoolDeployer.sol';
+import './interfaces/IUniswapV3PoolDeployer.sol';
 
-import './ButterPool.sol';
+import './UniswapV3Pool.sol';
 
-contract ButterPoolDeployer is IButterPoolDeployer {
+contract UniswapV3PoolDeployer is IUniswapV3PoolDeployer {
     struct Parameters {
         address factory;
         address token0;
@@ -14,12 +14,12 @@
         int24 tickSpacing;
     }
 
-    /// @inheritdoc IButterPoolDeployer
+    /// @inheritdoc IUniswapV3PoolDeployer
     Parameters public override parameters;
 
     /// @dev Deploys a pool with the given parameters by transiently setting the parameters storage slot and then
     /// clearing it after deploying the pool.
-    /// @param factory The contract address of the Butter factory
+    /// @param factory The contract address of the Uniswap V3 factory
     /// @param token0 The first token of the pool by address sort order
     /// @param token1 The second token of the pool by address sort order
     /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
@@ -32,7 +32,7 @@
         int24 tickSpacing
     ) internal returns (address pool) {
         parameters = Parameters({factory: factory, token0: token0, token1: token1, fee: fee, tickSpacing: tickSpacing});
-        pool = address(new ButterPool{salt: keccak256(abi.encode(token0, token1, fee))}());
+        pool = address(new UniswapV3Pool{salt: keccak256(abi.encode(token0, token1, fee))}());
         delete parameters;
     }
 }
